-- create Database
CREATE DATABASE sports_tournament;
USE sports_tournament;
-- create table for teams
CREATE TABLE Teams (
    team_id INT AUTO_INCREMENT PRIMARY KEY,
    team_name VARCHAR(100) NOT NULL,
    city VARCHAR(100)
);

-- create table for players table
CREATE TABLE Players (
    player_id INT AUTO_INCREMENT PRIMARY KEY,
    team_id INT NOT NULL,
    player_name VARCHAR(100) NOT NULL,
    role ENUM('Batsman', 'Bowler', 'All-Rounder', 'Goalkeeper', 'Forward', 'Defender'),
    FOREIGN KEY (team_id) REFERENCES Teams(team_id)
);

-- create table for matches table
CREATE TABLE Matches (
    match_id INT AUTO_INCREMENT PRIMARY KEY,
    match_date DATE,
    team1_id INT,
    team2_id INT,
    winner_team_id INT,
    venue VARCHAR(100),
    FOREIGN KEY (team1_id) REFERENCES Teams(team_id),
    FOREIGN KEY (team2_id) REFERENCES Teams(team_id),
    FOREIGN KEY (winner_team_id) REFERENCES Teams(team_id)
);

-- create table for Stats
CREATE TABLE Stats (
    stat_id INT AUTO_INCREMENT PRIMARY KEY,
    match_id INT,
    player_id INT,
    runs_scored INT DEFAULT 0,
    wickets_taken INT DEFAULT 0,
    goals_scored INT DEFAULT 0,
    assists INT DEFAULT 0,
    FOREIGN KEY (match_id) REFERENCES Matches(match_id),
    FOREIGN KEY (player_id) REFERENCES Players(player_id)
);

-- insert sample data for all tables

-- Teams
INSERT INTO Teams (team_name, city) VALUES
('Tigers', 'New York'),
('Eagles', 'Los Angeles'),
('Sharks', 'Miami'),
('Wolves', 'Chicago');

-- Players
INSERT INTO Players (team_id, player_name, role) VALUES
(1, 'John Smith', 'Forward'),
(1, 'Alex Brown', 'Defender'),
(2, 'Chris Johnson', 'Forward'),
(3, 'Ryan Lee', 'Goalkeeper'),
(4, 'David Kim', 'Forward');

-- Matches
INSERT INTO Matches (match_date, team1_id, team2_id, winner_team_id, venue) VALUES
('2025-10-01', 1, 2, 1, 'New York Arena'),
('2025-10-05', 3, 4, 4, 'Chicago Dome'),
('2025-10-10', 1, 3, 1, 'Miami Park');

-- Stats
INSERT INTO Stats (match_id, player_id, goals_scored, assists) VALUES
(1, 1, 2, 1),
(1, 3, 1, 0),
(2, 4, 0, 2),
(2, 5, 2, 0),
(3, 1, 3, 1),
(3, 4, 1, 1);

--match results
SELECT 
    m.match_id,
    t1.team_name AS Team1,
    t2.team_name AS Team2,
    w.team_name AS Winner,
    m.match_date,
    m.venue
FROM Matches m
JOIN Teams t1 ON m.team1_id = t1.team_id
JOIN Teams t2 ON m.team2_id = t2.team_id
JOIN Teams w ON m.winner_team_id = w.team_id;

--player scores
SELECT 
    p.player_name,
    t.team_name,
    SUM(s.goals_scored) AS Total_Goals,
    SUM(s.assists) AS Total_Assists
FROM Stats s
JOIN Players p ON s.player_id = p.player_id
JOIN Teams t ON p.team_id = t.team_id
GROUP BY p.player_id
ORDER BY Total_Goals DESC, Total_Assists DESC;

--view player leaderboard
CREATE OR REPLACE VIEW v_player_leaderboard AS
SELECT 
    p.player_name,
    t.team_name,
    SUM(s.goals_scored) AS total_goals,
    SUM(s.assists) AS total_assists
FROM Stats s
JOIN Players p ON s.player_id = p.player_id
JOIN Teams t ON p.team_id = t.team_id
GROUP BY p.player_id
ORDER BY total_goals DESC;

--team points table view
CREATE OR REPLACE VIEW v_team_points AS
SELECT 
    t.team_id,
    t.team_name,
    COUNT(m.match_id) AS matches_played,
    SUM(CASE WHEN m.winner_team_id = t.team_id THEN 1 ELSE 0 END) AS wins,
    (SUM(CASE WHEN m.winner_team_id = t.team_id THEN 1 ELSE 0 END) * 3) AS points
FROM Teams t
LEFT JOIN Matches m ON t.team_id IN (m.team1_id, m.team2_id)
GROUP BY t.team_id
ORDER BY points DESC;

--CTE for average player performance
WITH player_avg AS (
    SELECT 
        p.player_id,
        p.player_name,
        AVG(s.goals_scored) AS avg_goals,
        AVG(s.assists) AS avg_assists
    FROM Stats s
    JOIN Players p ON s.player_id = p.player_id
    GROUP BY p.player_id
)
SELECT * FROM player_avg ORDER BY avg_goals DESC;

--Export Team Performance Reports
SELECT *
INTO OUTFILE 'C:\\ProgramData\\MySQL\\MySQL Server 8.0\\Uploads\\team_performance.csv'
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\r\n'
FROM v_team_points;

